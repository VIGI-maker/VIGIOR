import streamlit as st
import pandas as pd
import uuid
import os

st.set_page_config(page_title="VIGIOR-H â€” Fractures Proximales de lâ€™HumÃ©rus", layout="centered")
st.title("ðŸ¦¾ VIGIOR-H â€” Estimation des Risques et Conduite Ã  Tenir")
st.write("Ce modÃ¨le permet dâ€™estimer les risques de complications (nÃ©crose, pseudarthrose, raideur) aprÃ¨s fracture proximale de lâ€™humÃ©rus, et suggÃ¨re une stratÃ©gie thÃ©rapeutique.")

# --- Formulaire principal ---
with st.form("form_vigior_h"):
    age = st.number_input("Ã‚ge du patient", 18, 100, step=1)
    sexe = st.selectbox("Sexe", ["Homme", "Femme"])

    tabac = st.selectbox("Tabagisme", ["Non", "Oui"])
    pa = 0
    if tabac == "Oui":
        pa = st.number_input("Pack-years (PA)", 0.0, 100.0, step=0.5)

    diabete = st.selectbox("DiabÃ¨te", ["Non", "Oui"])
    osteoporose = st.selectbox("OstÃ©oporose connue", ["Non", "Oui"])
    comorbidites = st.selectbox("ComorbiditÃ©s majeures", ["Non", "Oui"])

    neer = st.selectbox("Type de fracture selon Neer", ["2 fragments", "3 fragments", "4 fragments"])
    deplacement = st.selectbox("DÃ©placement inter-fragmentaire ?", ["Non", "Oui"])
    ecart_mm = 0
    if deplacement == "Oui":
        ecart_mm = st.slider("Ã‰cart inter-fragmentaire (en mm)", 0, 20, 5)

    hsa = st.slider("Angle cervico-diaphysaire (HSA, en Â°)", 90, 160, 135)
    dominance = st.selectbox("Fracture du bras dominant", ["Non", "Oui"])
    mobilite = st.selectbox("MobilitÃ© antÃ©rieure du patient", ["Normale", "LimitÃ©e"])

    traitement = st.selectbox("Traitement envisagÃ©", ["OrthopÃ©dique", "Chirurgical"])

    submit = st.form_submit_button("Ã‰valuer")

if submit:
    # --- Score simplifiÃ© basÃ© sur les facteurs clÃ©s (pondÃ©rations arbitraires pour le prototype) ---
    score = 0
    if age > 70: score += 2
    if tabac == "Oui": score += 1 if pa < 20 else 2
    if diabete == "Oui": score += 1
    if osteoporose == "Oui": score += 1
    if comorbidites == "Oui": score += 1
    if neer == "3 fragments": score += 2
    elif neer == "4 fragments": score += 3
    if deplacement == "Oui" and ecart_mm >= 5: score += 2
    if hsa < 120: score += 2
    if mobilite == "LimitÃ©e": score += 1

    # Risques estimÃ©s (formules Ã  ajuster avec modÃ¨le rÃ©el)
    risque_necrose = min(100, round(score * 5 + (2 if traitement == "OrthopÃ©dique" else -2), 1))
    risque_pseudo = min(100, round(score * 4 + (2 if traitement == "OrthopÃ©dique" else 0), 1))
    risque_raideur = min(100, round(score * 3 + (2 if mobilite == "LimitÃ©e" else 0), 1))

    # Recommandation
    if score >= 8:
        conduite = "\n- ProthÃ¨se cÃ©phalomÃ©dullaire ou inversÃ©e recommandÃ©e si Ã¢ge >70 ans.\n- RÃ©duction anatomique difficile Ã  obtenir."
    elif 5 <= score < 8:
        conduite = "\n- Traitement chirurgical par ostÃ©osynthÃ¨se si rÃ©duction possible.\n- Surveillance stricte post-opÃ©ratoire."
    else:
        conduite = "\n- Traitement conservateur acceptable.\n- Bonne rÃ©cupÃ©ration fonctionnelle attendue."

    # RÃ©sultats
    code_patient = f"VIG-{str(uuid.uuid4())[:8].upper()}"
    st.success(f"ðŸ§  Score global : {score}/15")
    st.info(f"ðŸ“‰ Risque de nÃ©crose : {risque_necrose} %")
    st.info(f"ðŸ¦´ Risque de pseudarthrose : {risque_pseudo} %")
    st.info(f"ðŸ¤• Risque de raideur : {risque_raideur} %")
    st.warning(f"ðŸ©º Conduite suggÃ©rÃ©e : {conduite}")
    st.code(f"ðŸ†” Code patient : {code_patient}", language='markdown')

    # --- Sauvegarde ---
    data = {
        'code_patient': code_patient,
        'age': age,
        'sexe': sexe,
        'tabac': tabac,
        'pa': pa,
        'diabete': diabete,
        'osteoporose': osteoporose,
        'comorbidites': comorbidites,
        'neer': neer,
        'deplacement': deplacement,
        'ecart_mm': ecart_mm,
        'hsa': hsa,
        'dominance': dominance,
        'mobilite': mobilite,
        'traitement': traitement,
        'score_total': score,
        'risque_necrose': risque_necrose,
        'risque_pseudo': risque_pseudo,
        'risque_raideur': risque_raideur,
        'recommandation': conduite
    }

    df_new = pd.DataFrame([data])
    if os.path.exists("vigior_humerus_database.csv"):
        df_old = pd.read_csv("vigior_humerus_database.csv")
        df = pd.concat([df_old, df_new], ignore_index=True)
    else:
        df = df_new
    df.to_csv("vigior_humerus_database.csv", index=False)

    st.success("âœ… DonnÃ©es enregistrÃ©es avec succÃ¨s.")
